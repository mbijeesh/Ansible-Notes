#command to collect facts
ansible linux-infra -m setup 

---
- name: execute script 
  hosts: localhost
  tasks:
       -  name: execute test script
          script: /tmp/testmail.sh
 # cat  /etc/testmail.sh
 #  echo testmail | mailx -s testmail <email>
 #------------
## Belwo playboook will add a line " This is  unixadmin" in the file /tmp/testfile on server server1. 
- name: variable assignment
  hosts: server1
  vars:
    myname: unixadmin
  tasks:
    - name: Test name
      lineinfile:
            path: /tmp/testfile
            line: 'This is  {{ myname }}'
       
# --------------
-  name: Service start
   hosts: localhost
   tasks:
        - name:  Start httpd service
          Service: 
             name: httpd 
             state: started
# -------------
-  name: Install nginx on Debian
   hosts: debian
   tasks:
     - name: Install nginx on debian
       apt:  
          name: nginx
          state: present
-  name: Install nginx on RHEL
   hosts: rhel
   tasks: 
     - name:  Install nginx on RHEL
       yum: 
          name: nginx 
          state: present
#
Above play can be written in another way using condition (yum for RHEL and Suse ; apt for Debian and with specific version)

-  name: Install nginx on  Debian and RHEL
   hosts: all
   tasks: 
    -  name: Install nginx on  Debian
       apt:
         name: nginx
         state: present
       when: ansible_os_family == "Debian" and
             ansible_distribution_version == "16.04"
    - name: Install nginx on  RHEL
      yum:  
         name: nginx 
         state: present
      when: ansible_os_family == "RedHat" or
            ansible_os_family == "Suse"
## Below is a simple condition checking playbook.

- name:  Install package if OS is rhel
  hosts:  server1
  gather_facts: yes
  become: yes
  tasks:
     -  name:  Install package
        yum:
          name: nginx
          state: present
        when: ansible_os_family == "RedHat"
#
Store the output and use it for another action:
Below playbook check the /etc/motd content and if it found a word Restrict, it will execute the shell command. 

- name: test play
  hosts: server1
  tasks:
      - shell: cat /etc/motd
        register: motd_contents

      - shell: echo "motd contains the word Restrict" > /tmp/output.b
        when: motd_contents.stdout.find('Restrict') != -1
#####
Using the  above play, we can send email instead of adding an entry to file. 

- name: test play
  hosts: server1
  gather_facts: no
  tasks:

      - shell: cat /etc/motd
        register: motd_contents
      - mail:
          to: bijeeshmanappatty@toppanmerrillllc.com
          subject: status
          body: status motd
          from: uxadmin@linux-dev-stp.tm.toppanmerrill.com
        when: motd_contents.stdout.find('Toppan') != -1

#  
check status of service  and send email if it is down. (This is not working now)

-  name: Check httpd service status and send email if it is down
   hosts: server1
   gather_facts: no
   tasks:
     -  shell: systemctl status httpd
        register:  result
        ignore_errors: True
     -  mail:
          to : emailid
          subject: httpd-status
          body: httpd service is down
          from: emailid
        when:  result.stdout.find('dead') != -1

#

-   name: 'Add name server entry if not already entered'
    hosts: localhost
    tasks:
        -
            shell: 'cat /etc/resolv.conf'
            register: command_output
        -
            shell: 'echo "nameserver 10.0.0.0" >> /etc/resolv.conf'
            when:  'command_output.stdout.find("10.0.0.0") == -1'
#
#Looping
- name: create one user
  hosts: testhosts
  tasks:
     - user: name=john state=present
#
- name: create more users
  hosts: testhosts
  tasks: 
     - user: name='{{ item }'  state=present
       loop:
          - john
          - ravi
          - mani
          - kiran
#
- name: create users with UIDs
  hosts:  testhosts 
  tasks: 
    - user: name= '{{item.name }}' state=present uid='{{ item.uid}}' 
      loop:
        - name: john
          uid: 1010
        - name: ravi 
          uid: 1011
        - name: mani 
          uid: 1012
        - name: kiran  
          uid: 1013
#
- name: loop "with_"
  hosts: localhost
  vars:
    fruits:
      - Apple
      - Orange
      - Grapes
  tasks:
          - command:  'echo "{{ item }}"'
            with_items: '{{ fruits }}'
# same can be write as follows without vars
- name: execute loop
  hosts: localhost
  tasks:
      - command: 'echo "{{ item }}"'
        with_items:
           - Apple
           - Orange
           - Grapes
#- name: execute loop
  hosts: localhost
  tasks:
      - command: 'echo "{{ item }}"'
        loop:
           - Apple
           - Orange
           - Grapes
#
Anssible Role:
Pre-defined tasks which can be use by others. 
For example, installing,enabling and starting a service we can write a yml play book  like below.  
-  name:  Install, enable and start httpd
   hosts: webservers
   tasks: 
      -name:  Install httpd
       yum: 
           name:  httpd 
           state: present
       service: 
           name: httpd
           state: started    
           eabled: yes           
#
The above things we can use in a play book  as  a role.

#
Roles use organized way for storing different kind of:
files,tasks, defaults, vars,  templates,hanlders   etc .
To create own Role from scratch,

$ansible-galaxy init http-test
This will create a directory structure with name: http-test
To use this role within a play book: move the new directory structure to the directory "roles" in the location 
where your play book created. 
Or copy the new directory  sructure to  /etc/ansible/roles directory which is the default location
where ansible searches for the roles. 

###
-  name: install http using role
   hosts: test-stp
   become: yes
   roles:
    - http-test
#
---
#vi http-test/tasks/main.yml
# tasks file for http
      -name:  Install httpd
       yum: 
           name:  httpd 
           state: present
       service: 
           name: httpd
           state: started    
           eabled: yes   
#
